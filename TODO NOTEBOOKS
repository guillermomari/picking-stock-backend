- CRUD DE TODAS LAS ENTIDADES AGREGAR EL PAGINADO Y OFFSET - ESTA LA BASE FALTA ARMAR CADA ENTIDAD BIEN
- TAREAS RE REABASTECIMIENTO, CONTABILIZACION ( FALTA ARMAR EL SERVICIO Y EL ENDPOINT)
- EMPEZAR A HACER FLUJOS DE PROCESO Y VER COMO FUNCIONAN LOS ENDPOINTS EN ESO
- TEST FUNCIONAL
- DESPLIEGUES EN AMBIENTES QA Y PROD
- DOCUMENTACION DE API
- IMPLEMENTAR ALGO PARA EL LOGGING
- VER MEDIDAS DE SEGURIDAD PARA LA API
- VER DEUDA TECNICA DE SWAGGER QUE NO GENERA AUTOMATICAMENTE EL DOCUMENTO 

- REPASAR ENTIDADES SOBRE TODO CON CONTABILIZACION Y CUANDO SE CREARON INVENTARIO Y LO DEMAS, FALTAN CAMPOS SEGURAMENTE ------> OK
- VER COMO HACER LAS MIGRACIONES NEUVAS ACTUALIZADAS; HAY DEPENDENCIAS DE PRELATURA DE LAS ENTIDADES PARA PODER RELACIONAR, VER SI SEPARAMOS LA CREACION DE LAS ENTIDADES DE LAS RELACIOENS------> OK






SWAGGER

Existen varias opciones que puedes utilizar para visualizar y documentar una API en formato JSON generado por swagger-autogen. Algunas de ellas son:

Redoc: es una librería que permite visualizar la documentación de una API en formato OpenAPI 3.0, incluyendo soporte para temas personalizados y autenticación con OAuth2. Puedes encontrar más información en su sitio web oficial: https://redoc.ly/
Swagger UI: es una herramienta muy popular para visualizar documentación de APIs generada en formato OpenAPI. Puedes obtener más información en su sitio web oficial: https://swagger.io/tools/swagger-ui/
ReDoc Express: es una librería que permite integrar Redoc con Express, de manera similar a como se hace con swagger-ui-express. Puedes encontrar más información en su repositorio de GitHub: https://github.com/Rebilly/ReDoc/tree/master/cli/express
Ten en cuenta que la mayoría de estas herramientas requieren que el archivo JSON generado por swagger-autogen esté en un formato compatible con OpenAPI 3.0 o superior, por lo que deberás asegurarte de que la configuración de swaggerAutogen esté generando el archivo en el formato correcto.

Instalar las dependencias necesarias:
Copy code
npm install swagger-autogen redoc-express express

Claro, aquí te dejo una guía paso a paso para implementar swagger-autogen y ReDoc Express:

Instalar las dependencias necesarias:
Copy code
npm install swagger-autogen redoc-express express
Crear un archivo swagger.js en la raíz de tu proyecto con el siguiente contenido:
js
Copy code
const swaggerAutogen = require('swagger-autogen')();

const outputFile = './swagger_output.json';
const endpointsFiles = ['./app.js'];

const doc = {
  info: {
    version: "1.0.0",
    title: "API de ejemplo",
    description: "Documentación de la API de ejemplo",
  },
  host: "localhost:3000",
  basePath: "/",
  schemes: ['http', 'https'],
};

swaggerAutogen(outputFile, endpointsFiles, doc).then(() => {
  require('./server.js');
});
En este archivo, configuramos la información básica de la documentación de la API, indicamos el archivo de salida y los archivos donde se encuentran las rutas de la aplicación.

En el archivo server.js, importamos las dependencias y configuramos las rutas y middleware de la aplicación:
js
Copy code
const express = require('express');
const redoc = require('redoc-express');
const swaggerUi = require('swagger-ui-express');
const swaggerFile = require('./swagger_output.json');
const app = express();

// Aquí configuramos las rutas y middleware de la aplicación
app.get('/', (req, res) => {
  res.send('API de ejemplo');
});

// Endpoint para servir la documentación de Swagger
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerFile));

// Endpoint para servir la documentación de ReDoc
app.get('/docs', redoc({
  title: 'API de ejemplo',
  specUrl: '/swagger_output.json',
}));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Servidor iniciado en puerto ${PORT}`);
});
En este archivo, configuramos las rutas de la aplicación y agregamos dos endpoints: uno para servir la documentación de Swagger y otro para servir la documentación de ReDoc. En el endpoint de ReDoc, configuramos el título de la documentación y la URL donde se encuentra el archivo generado por swagger-autogen.

Ejecutar el archivo swagger.js para generar el archivo swagger_output.json:
Copy code
node swagger.js
Ejecutar la aplicación:
Copy code
node server.js
Acceder a la documentación de Swagger en http://localhost:3000/api-docs y la documentación de ReDoc en http://localhost:3000/docs.
